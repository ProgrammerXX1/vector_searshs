import os
import time
import json
import math
import random
import string
import requests
from datetime import datetime, timedelta, timezone

# --- –ö–æ–Ω—Ñ–∏–≥–∏ (ENV —Å –¥–µ—Ñ–æ–ª—Ç–∞–º–∏) ---
OLLAMA_URL   = os.getenv("OLLAMA_URL",   "http://localhost:11434/api/embeddings")
OLLAMA_MODEL = os.getenv("OLLAMA_EMB_MODEL", "nomic-embed-text")
WEAVIATE_URL = os.getenv("WEAVIATE_URL", "http://localhost:8080")
WEAVIATE_SCHEMA = f"{WEAVIATE_URL}/v1/schema"
WEAVIATE_OBJS   = f"{WEAVIATE_URL}/v1/objects"

# --- –ò–º–µ–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π ---
CASE         = "Case"
VICTIM       = "VictimProfile"
EXPERT       = "ExpertAnswer"
PROSECUTOR   = "ProsecutorAnswer"
DOC_CHUNK    = "DocumentChunk"
FIN_TX       = "FinancialTransaction"
COMM         = "CommunicationRecord"
RULING       = "CourtRuling"

ALL_CLASSES = [CASE, VICTIM, EXPERT, PROSECUTOR, DOC_CHUNK, FIN_TX, COMM, RULING]

# --- –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∞—Å—Å–∞–º (—Ä–æ–≤–Ω–æ 200) ---
COUNTS = {
    CASE: 8,
    VICTIM: 40,
    EXPERT: 30,
    PROSECUTOR: 30,
    DOC_CHUNK: 60,
    FIN_TX: 16,
    COMM: 8,
    RULING: 8,
}

random.seed(42)


# ---------------------------
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ---------------------------
def http(method, url, **kw):
    r = requests.request(method, url, timeout=30, **kw)
    if not r.ok:
        raise RuntimeError(f"{method} {url} -> {r.status_code}: {r.text}")
    return r

def embed(text: str):
    # Ollama embeddings API (–æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∑–∞ —Ä–∞–∑)
    resp = http("POST", OLLAMA_URL, json={"model": OLLAMA_MODEL, "prompt": text})
    data = resp.json()
    return data["embedding"]

def class_exists(name: str) -> bool:
    r = requests.get(f"{WEAVIATE_SCHEMA}/{name}")
    return r.status_code == 200

def drop_class(name: str):
    if class_exists(name):
        print(f"üóëÔ∏è  drop {name}")
        http("DELETE", f"{WEAVIATE_SCHEMA}/{name}")

def create_class(name: str, props: list[dict]):
    body = {
        "class": name,
        "vectorizer": "none",                # –º—ã –ø–æ–¥–∞—ë–º —Å–≤–æ–∏ –≤–µ–∫—Ç–æ—Ä–∞
        "vectorIndexType": "hnsw",
        "vectorIndexConfig": {"distance": "cosine"},
        "properties": props,
    }
    http("POST", WEAVIATE_SCHEMA, json=body)
    print(f"‚úÖ created {name}")

def put_object(class_name: str, props: dict, embed_text_key: str):
    vec = embed(props[embed_text_key])
    body = {"class": class_name, "properties": props, "vector": vec}
    r = http("POST", WEAVIATE_OBJS, json=body)
    return r.json().get("id")


# ---------------------------
# –°–•–ï–ú–ê (8 –ö–û–õ–õ–ï–ö–¶–ò–ô)
# ---------------------------
# REST-—Å—Ö–µ–º–∞ Weaviate –∂–¥—ë—Ç dataType –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–æ–≤ —Å—Ç—Ä–æ–∫: ["text"], ["int"], ["date"], ["number"]
def props_case():
    return [
        {"name": "case_id",   "dataType": ["int"]},
        {"name": "title",     "dataType": ["text"]},
        {"name": "status",    "dataType": ["text"]},
        {"name": "opened_at", "dataType": ["date"]},
        {"name": "lang",      "dataType": ["text"]},
        {"name": "notes",     "dataType": ["text"]},
    ]

def props_victim():
    return [
        {"name": "person_id", "dataType": ["int"]},
        {"name": "case_id",   "dataType": ["int"]},
        {"name": "full_name", "dataType": ["text"]},
        {"name": "iin",       "dataType": ["text"]},
        {"name": "birthdate", "dataType": ["date"]},
        {"name": "contacts",  "dataType": ["text"]},
        {"name": "notes",     "dataType": ["text"]},
        {"name": "lang",      "dataType": ["text"]},
    ]

def props_expert():
    return [
        {"name": "expert_id",   "dataType": ["int"]},
        {"name": "case_id",     "dataType": ["int"]},
        {"name": "specialty",   "dataType": ["text"]},
        {"name": "question",    "dataType": ["text"]},
        {"name": "answer",      "dataType": ["text"]},
        {"name": "answered_at", "dataType": ["date"]},
        {"name": "lang",        "dataType": ["text"]},
    ]

def props_prosecutor():
    return [
        {"name": "prosecutor_id", "dataType": ["int"]},
        {"name": "case_id",       "dataType": ["int"]},
        {"name": "filing_type",   "dataType": ["text"]},
        {"name": "text",          "dataType": ["text"]},
        {"name": "filed_at",      "dataType": ["date"]},
        {"name": "lang",          "dataType": ["text"]},
    ]

def props_doc_chunk():
    return [
        {"name": "case_id",     "dataType": ["int"]},
        {"name": "document_id", "dataType": ["int"]},
        {"name": "chunk_idx",   "dataType": ["int"]},
        {"name": "source_page", "dataType": ["int"]},
        {"name": "doc_type",    "dataType": ["text"]},
        {"name": "text",        "dataType": ["text"]},
        {"name": "created_at",  "dataType": ["date"]},
        {"name": "lang",        "dataType": ["text"]},
    ]

def props_fin_tx():
    return [
        {"name": "case_id",      "dataType": ["int"]},
        {"name": "iban",         "dataType": ["text"]},
        {"name": "account",      "dataType": ["text"]},
        {"name": "amount",       "dataType": ["number"]},
        {"name": "currency",     "dataType": ["text"]},
        {"name": "counterparty", "dataType": ["text"]},
        {"name": "timestamp",    "dataType": ["date"]},
        {"name": "note",         "dataType": ["text"]},
        {"name": "lang",         "dataType": ["text"]},
    ]

def props_comm():
    return [
        {"name": "case_id",   "dataType": ["int"]},
        {"name": "channel",   "dataType": ["text"]},
        {"name": "sender",    "dataType": ["text"]},
        {"name": "receiver",  "dataType": ["text"]},
        {"name": "timestamp", "dataType": ["date"]},
        {"name": "content",   "dataType": ["text"]},
        {"name": "lang",      "dataType": ["text"]},
    ]

def props_ruling():
    return [
        {"name": "case_id",      "dataType": ["int"]},
        {"name": "court",        "dataType": ["text"]},
        {"name": "ruling_type",  "dataType": ["text"]},
        {"name": "session_date", "dataType": ["date"]},
        {"name": "text",         "dataType": ["text"]},
        {"name": "lang",         "dataType": ["text"]},
    ]


# ---------------------------
# –ì–ï–ù–ï–†–ê–¶–ò–Ø –î–ê–ù–ù–´–• (RU)
# ---------------------------
MONTHS = ["—è–Ω–≤–∞—Ä—è","—Ñ–µ–≤—Ä–∞–ª—è","–º–∞—Ä—Ç–∞","–∞–ø—Ä–µ–ª—è","–º–∞—è","–∏—é–Ω—è",
          "–∏—é–ª—è","–∞–≤–≥—É—Å—Ç–∞","—Å–µ–Ω—Ç—è–±—Ä—è","–æ–∫—Ç—è–±—Ä—è","–Ω–æ—è–±—Ä—è","–¥–µ–∫–∞–±—Ä—è"]

def iso_days_ago(days: int) -> str:
    return (datetime.now(timezone.utc) - timedelta(days=days)).isoformat()

def rnd_date(start_days_ago=900, end_days_ago=0) -> str:
    d = random.randint(end_days_ago, start_days_ago)
    return iso_days_ago(d)

def rnd_phone():
    return f"+7{random.randint(700,799)}{random.randint(1000000,9999999)}"

def rnd_email(name="user"):
    return f"{name}{random.randint(1,9999)}@example.com"

def rnd_iin():
    return f"{random.randint(700101, 991231)}{random.randint(100000,999999)}"

def rnd_iban():
    return f"KZ{random.randint(10,99)}{random.randint(100000000000000000,999999999999999999)}"

def rnd_wallet():
    return f"0x{random.randint(10**15, 10**16-1):x}"

def rnd_amount():
    return random.randint(50_000, 10_000_000)

def rnd_case_title(i):
    return f"–î–µ–ª–æ TAKORP ‚Ññ{1000+i}"

def rnd_case_status():
    return random.choice(["open","investigation","trial","closed"])

def rnd_lang():
    return random.choice(["ru","kk"])

def rnd_doc_type():
    return random.choice(["interrogation","statement","bank_record","transfer","contract","order","webpage","notice"])

def rnd_court():
    return random.choice(["–ê–ª–º–∞—Ç–∏–Ω—Å–∫–∏–π –≥–æ—Ä—Å—É–¥","–°—É–¥ –ê—Å—Ç–∞–Ω—ã","–°—É–¥ –ö–∞—Ä–∞–≥–∞–Ω–¥—ã"])

def rnd_channel():
    return random.choice(["telegram","email","whatsapp"])

def text_case(i):
    return f"–†–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º –≤ TAKORP. –≠–ø–∏–∑–æ–¥ {i}. –£–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–µ–≤–æ–¥—ã, —Ä–µ–∫–ª–∞–º–∞ –∏ –æ–±–µ—â–∞–Ω–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏."

def text_victim(i):
    opts = [
        "–ü–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏–π –≤–ª–æ–∂–∏–ª —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ TAKORP –∏ —Å–æ–æ–±—â–∏–ª –æ –ø–æ—Ç–µ—Ä—è—Ö.",
        "–ü–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏–π —É–∫–∞–∑–∞–ª –ø–µ—Ä–µ–≤–æ–¥ USDT –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ—à–µ–ª—ë–∫.",
        "–°–æ–æ–±—â–∏–ª –æ —Å–Ω—è—Ç–∏—è—Ö –Ω–∞–ª–∏—á–Ω—ã—Ö –∏ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö –Ω–∞ –∫–∞—Ä—Ç—É –∞—Ñ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏—Ü."
    ]
    return random.choice(opts)

def text_expert_answer(i):
    opts = [
        "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–≤–∏–∂–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –º–µ–∂–¥—É –∫–æ—à–µ–ª—å–∫–∞–º–∏ A –∏ B —á–µ—Ä–µ–∑ –±–∏—Ä–∂—É X.",
        "–ê–¥—Ä–µ—Å B –ø–æ–ª—É—á–∞–ª —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –º–∏–∫—Å–µ—Ä–∞, —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å TAKORP.",
        "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–≤—è–∑—É—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ —Å—É–º–º—É —Å–≤—ã—à–µ 5 –º–ª–Ω —Ç–≥."
    ]
    return random.choice(opts)

def text_prosecutor(i):
    opts = [
        "–•–æ–¥–∞—Ç–∞–π—Å—Ç–≤–æ –æ–± –∞—Ä–µ—Å—Ç–µ –∏–º—É—â–µ—Å—Ç–≤–∞ TAKORP –≤ —Ä–∞–∑–º–µ—Ä–µ 10 –º–ª–Ω —Ç–≥.",
        "–í–æ–∑—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∂–∞–ª–æ–±—É –∑–∞—â–∏—Ç—ã –ø–æ –≤–æ–ø—Ä–æ—Å—É –∞—Ä–µ—Å—Ç–∞ –∏–º—É—â–µ—Å—Ç–≤–∞.",
        "–ó–∞–∫–ª—é—á–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ –¥–µ–ª—É."
    ]
    return random.choice(opts)

def text_doc_chunk(i):
    opts = [
        "–Ø –≤–ª–æ–∂–∏–ª –¥–µ–Ω—å–≥–∏ –≤ TAKORP",
        "–ü–æ—Ç–µ—Ä–ø–µ–≤—à–∏–π —Å–æ–æ–±—â–∏–ª –æ –≤–ª–æ–∂–µ–Ω–∏—è—Ö –≤ –ø–∏—Ä–∞–º–∏–¥—É TAKORP",
        "TAKORP –æ–±–µ—â–∞–ª–∞ 15% –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ",
        "–†–µ–∫–ª–∞–º–∞ –ø—Ä–æ–µ–∫—Ç–∞ TAKORP –≤ Telegram-–∫–∞–Ω–∞–ª–µ",
        "–î–æ–≥–æ–≤–æ—Ä –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π —Å TAKORP",
        "USDT –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—ë–∫",
        "IBAN —É–∫–∞–∑–∞–Ω –≤ –ø–ª–∞—Ç—ë–∂–Ω–æ–º –ø–æ—Ä—É—á–µ–Ω–∏–∏",
        "–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
        "–ü—Ä–∏–∫–∞–∑ –æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏",
        "–ü—É–±–ª–∏—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç–∞"
    ]
    return random.choice(opts)

def text_fin_note(i, amt):
    return f"–ü–µ—Ä–µ–≤–æ–¥ {amt} —Ç–≥ –Ω–∞ —Å—á—ë—Ç {rnd_wallet()} –ø–æ IBAN {rnd_iban()}"

def text_comm(i):
    return random.choice([
        "–ù—É–∂–Ω–æ —Å—Ä–æ—á–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ USDT –Ω–∞ –Ω–æ–≤—ã–π –∫–æ—à–µ–ª—ë–∫.",
        "–ü—É–±–ª–∏–∫—É–π—Ç–µ —Ä–µ–∫–ª–∞–º—É –ø—Ä–æ –≤—ã—Å–æ–∫–∏–π –¥–æ—Ö–æ–¥.",
        "–°–æ–≥–ª–∞—Å—É–π—Ç–µ –¥–æ–≥–æ–≤–æ—Ä –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ."
    ])

def text_ruling(i):
    return random.choice([
        "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—É–¥–∞ –æ–± –∞—Ä–µ—Å—Ç–µ –∏–º—É—â–µ—Å—Ç–≤–∞.",
        "–ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã.",
        "–†–µ—à–µ–Ω–∏–µ —Å—É–¥–∞ –ø–æ –∏—Å–∫—É –æ –≤–∑—ã—Å–∫–∞–Ω–∏–∏ —É–±—ã—Ç–∫–æ–≤."
    ])


# ---------------------------
# –°–ò–î–ò–ù–ì
# ---------------------------
def reset_schema():
    print("== RESET SCHEMA ==")
    for cls in ALL_CLASSES:
        drop_class(cls)

    create_class(CASE,       props_case())
    create_class(VICTIM,     props_victim())
    create_class(EXPERT,     props_expert())
    create_class(PROSECUTOR, props_prosecutor())
    create_class(DOC_CHUNK,  props_doc_chunk())
    create_class(FIN_TX,     props_fin_tx())
    create_class(COMM,       props_comm())
    create_class(RULING,     props_ruling())

def seed_cases(n):
    print(f"== SEED {CASE} x{n} ==")
    for i in range(n):
        props = {
            "case_id":   1 + i,
            "title":     rnd_case_title(i),
            "status":    rnd_case_status(),
            "opened_at": rnd_date(900, 600),
            "lang":      rnd_lang(),
            "notes":     text_case(i),
        }
        put_object(CASE, props, embed_text_key="notes")

def seed_victims(n):
    print(f"== SEED {VICTIM} x{n} ==")
    for i in range(n):
        nm = random.choice(["–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω","–ü–µ—Ç—Ä–æ–≤ –ü—ë—Ç—Ä","–°–µ—Ä–∏–∫ –ù—É—Ä–ª–∞–Ω","–ê–π–±–µ–∫ –ñ–∞–Ω–¥–æ—Å","–ú–∞—Ä–∏—è –ö–∏–º","–ê–ª–∏—è –ñ–∞–∫—Å—ã–ª—ã–∫–æ–≤–∞"])
        props = {
            "person_id": 100 + i,
            "case_id":   1 + (i % max(1, COUNTS[CASE])),
            "full_name": nm,
            "iin":       rnd_iin(),
            "birthdate": rnd_date(18000, 9000),
            "contacts":  f"{rnd_email('user')}, {rnd_phone()}",
            "notes":     text_victim(i),
            "lang":      "ru",
        }
        put_object(VICTIM, props, embed_text_key="notes")

def seed_experts(n):
    print(f"== SEED {EXPERT} x{n} ==")
    specs = ["—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞","–∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑","–ò–¢-—ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞"]
    for i in range(n):
        props = {
            "expert_id":   200 + i,
            "case_id":     1 + (i % max(1, COUNTS[CASE])),
            "specialty":   random.choice(specs),
            "question":    "–ü—Ä–æ—Å–ª–µ–¥–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤",
            "answer":      text_expert_answer(i),
            "answered_at": rnd_date(400, 10),
            "lang":        "ru",
        }
        put_object(EXPERT, props, embed_text_key="answer")

def seed_prosecutors(n):
    print(f"== SEED {PROSECUTOR} x{n} ==")
    ftypes = ["motion","reply","answer"]
    for i in range(n):
        props = {
            "prosecutor_id": 300 + i,
            "case_id":       1 + (i % max(1, COUNTS[CASE])),
            "filing_type":   random.choice(ftypes),
            "text":          text_prosecutor(i),
            "filed_at":      rnd_date(500, 5),
            "lang":          "ru",
        }
        put_object(PROSECUTOR, props, embed_text_key="text")

def seed_doc_chunks(n):
    print(f"== SEED {DOC_CHUNK} x{n} ==")
    for i in range(n):
        props = {
            "case_id":     1 + (i % max(1, COUNTS[CASE])),
            "document_id": 10_000 + i,
            "chunk_idx":   i % 5,
            "source_page": (i % 7) + 1,
            "doc_type":    rnd_doc_type(),
            "text":        text_doc_chunk(i),
            "created_at":  rnd_date(700, 1),
            "lang":        "ru",
        }
        put_object(DOC_CHUNK, props, embed_text_key="text")

def seed_fin_tx(n):
    print(f"== SEED {FIN_TX} x{n} ==")
    for i in range(n):
        amt = rnd_amount()
        props = {
            "case_id":      1 + (i % max(1, COUNTS[CASE])),
            "iban":         rnd_iban(),
            "account":      f"ACC-{random.randint(1000,9999)}",
            "amount":       float(amt),
            "currency":     random.choice(["KZT","USD"]),
            "counterparty": f"CP-{random.randint(100000,999999)}",
            "timestamp":    rnd_date(800, 1),
            "note":         text_fin_note(i, amt),
            "lang":         "ru",
        }
        put_object(FIN_TX, props, embed_text_key="note")

def seed_comm(n):
    print(f"== SEED {COMM} x{n} ==")
    for i in range(n):
        props = {
            "case_id":   1 + (i % max(1, COUNTS[CASE])),
            "channel":   rnd_channel(),
            "sender":    f"user{random.randint(1,999)}",
            "receiver":  f"user{random.randint(1,999)}",
            "timestamp": rnd_date(600, 1),
            "content":   text_comm(i),
            "lang":      "ru",
        }
        put_object(COMM, props, embed_text_key="content")

def seed_ruling(n):
    print(f"== SEED {RULING} x{n} ==")
    for i in range(n):
        props = {
            "case_id":      1 + (i % max(1, COUNTS[CASE])),
            "court":        rnd_court(),
            "ruling_type":  random.choice(["–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ","–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ","—Ä–µ—à–µ–Ω–∏–µ"]),
            "session_date": rnd_date(900, 1),
            "text":         text_ruling(i),
            "lang":         "ru",
        }
        put_object(RULING, props, embed_text_key="text")


def main():
    print("== START ==")
    # 1) –°–±—Ä–æ—Å —Å—Ö–µ–º—ã
    reset_schema()

    # 2) –ó–∞—Å–µ–≤ –ø–æ –∫–ª–∞—Å—Å–∞–º (–≤ —Å—É–º–º–µ 200 –æ–±—ä–µ–∫—Ç–æ–≤)
    seed_cases(COUNTS[CASE])
    seed_victims(COUNTS[VICTIM])
    seed_experts(COUNTS[EXPERT])
    seed_prosecutors(COUNTS[PROSECUTOR])
    seed_doc_chunks(COUNTS[DOC_CHUNK])
    seed_fin_tx(COUNTS[FIN_TX])
    seed_comm(COUNTS[COMM])
    seed_ruling(COUNTS[RULING])

    # 3) –ì–æ—Ç–æ–≤–æ
    total = sum(COUNTS.values())
    print(f"== DONE. Inserted ~{total} objects across 8 classes ==")

if __name__ == "__main__":
    main()
